(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[494],{3905:function(e,t,n){"use strict";n.d(t,{Zo:function(){return m},kt:function(){return d}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},m=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,m=u(e,["components","mdxType","originalType","parentName"]),c=l(n),d=a,f=c["".concat(s,".").concat(d)]||c[d]||p[d]||i;return n?r.createElement(f,o(o({ref:t},m),{},{components:n})):r.createElement(f,o({ref:t},m))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=c;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:a,o[1]=u;for(var l=2;l<i;l++)o[l]=n[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},5983:function(e,t,n){"use strict";n.r(t),n.d(t,{frontMatter:function(){return o},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=n(2122),a=n(9756),i=(n(7294),n(3905)),o={sidebar_position:1},u={unversionedId:"patterns/sliding-window-pattern",id:"patterns/sliding-window-pattern",isDocsHomePage:!1,title:"Sliding Window Pattern",description:"In many problems dealing with an array (or a LinkedList), we are asked to find or calculate something among all the contiguous subarrays (or sub lists) of a given size.",source:"@site/docs/patterns/sliding-window-pattern.md",sourceDirName:"patterns",slug:"/patterns/sliding-window-pattern",permalink:"/docs/patterns/sliding-window-pattern",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/patterns/sliding-window-pattern.md",version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/docs/tutorial-extras/translate-your-site"},next:{title:"Two Pointer Pattern",permalink:"/docs/patterns/two-pointers"}},s=[{value:"Maximum Sum Subarray of Size K (easy)",id:"maximum-sum-subarray-of-size-k-easy",children:[]}],l={toc:s};function m(e){var t=e.components,n=(0,a.Z)(e,["components"]);return(0,i.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"In many problems dealing with an array (or a LinkedList), we are asked to find or calculate something among all ",(0,i.kt)("inlineCode",{parentName:"p"},"the contiguous subarrays (or sub lists) of a given size. ")," "),(0,i.kt)("p",null,"For example, take a look at this problem:"),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Given an array, find the average of all contiguous subarrays of size \u2018K\u2019 in it")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Input : [2, 1, 5, 1, 3, 2], k=3")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"Subarray with maximum sum is [5, 1, 3]")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"Output : 9")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Input : [2, 3, 4, 1, 5], k=2")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"Subarray with maximum sum is [3, 4]")," -> ",(0,i.kt)("inlineCode",{parentName:"li"},"Output : 7"))),(0,i.kt)("h2",{id:"maximum-sum-subarray-of-size-k-easy"},"Maximum Sum Subarray of Size K (easy)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="find a maximum sum subarray for size k"',title:'"find',a:!0,maximum:!0,sum:!0,subarray:!0,for:!0,size:!0,'k"':!0},"function max_sub_array_of_size_k(k, arr) {\n  let maxSum = 0,\n    windowSum = 0;\n\n  for (i = 0; i < arr.length - k + 1; i++) {\n    windowSum = 0;\n    for (j = i; j < i + k; j++) {\n      windowSum += arr[j];\n    }\n    maxSum = Math.max(maxSum, windowSum);\n  }\n  return maxSum;\n}\n\nconsole.log(`Maximum sum of a subarray of size K: ${max_sub_array_of_size_k(3, [2, 1, 5, 1, 3, 2])}`);\nconsole.log(`Maximum sum of a subarray of size K: ${max_sub_array_of_size_k(2, [2, 3, 4, 1, 5])}`);\n")))}m.isMDXComponent=!0}}]);